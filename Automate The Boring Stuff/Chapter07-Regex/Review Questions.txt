Practice Questions

1. What is the function that creates Regex objects?

import re
re.compile(r'pattern')

2. Why are raw strings often used when creating Regex objects?

So you don't have to escape the \ all the time.

3. What does the search() method return?

Searches the string provided for regex matches. It will return the first matched object, otherwise it will return None.

4. How do you get the actual strings that match the pattern from a Match object?

Use the matchObject.group() function to get the text matched.

5. In the regex created from r'(\d\d\d)-(\d\d\d-\d\d\d\d)', what does group 0 cover? Group 1? Group 2?

Group 0 is the entire match.
Group 1 is the first 3 digits.
Group 2 is the 3 digits followed by - followed by 3 more digits.

6. Parentheses and periods have specific meanings in regular expression syntax. How would you specify that you want a regex to match actual parentheses and period characters?

Escape them with a backslash.

7. The findall() method returns a list of strings or a list of tuples of strings. What makes it return one or the other?

findall() will return all matched objects. If there are no capture groups in the regex it will return a list of matches. If there are capture groups in the regex, it will return a tuple of matches.

8. What does the | character signify in regular expressions?

Boolean OR logic.

9. What two things does the ? character signify in regular expressions?

An optional match of a single character, or laziness after a * or +.

10. What is the difference between the + and * characters in regular expressions?

* is 0 or many matches.
+ is 1 or many matches.

11. What is the difference between {3} and {3,5} in regular expressions?

{3} will match exactly 3, {3,5} will match between 3 and 5 inclusive.

12. What do the \d, \w, and \s shorthand character classes signify in regular expressions?

\d is [0-9]
\w is [A-Za-z0-9_]
\s is [ \t\r\n\f]

13. What do the \D, \W, and \S shorthand character classes signify in regular expressions?

\d is [^0-9]
\w is [^A-Za-z0-9_]
\s is [^ \t\r\n\f]

14. How do you make a regular expression case-insensitive?

Use the ignore case flag, in Python it is re.IGNORECASE

15. What does the . character normally match? What does it match if re.DOTALL is passed as the second argument to re.compile()?

Any character except \r|\n|\r\n
It will match everything.

16. What is the difference between these two: .* and .*?

.* is greedy, which means it will keep matching until it can't match anymore.
.*? is lazy, which means it will stop matching at the first match.

17. What is the character class syntax to match all numbers and lowercase letters?

[0-9a-z]

18. If numRegex = re.compile(r'\d+'), what will numRegex.sub('X', '12 drummers, 11 pipers, five rings, 3 hens') return?

X drummers, X pipers, five rings, X hens
Because all the numbers are replaced with X.

19. What does passing re.VERBOSE as the second argument to re.compile() allow you to do?

It allows you to have comments and spacing inside of regular expressions. The comments and additional spaces are ignored.

20. How would you write a regex that matches a number with commas for every three digits? It must match the following:

    '42'
    '1,234'
    '6,368,745'

but not the following:

    '12,34,567' (which has only two digits between the commas)
    '1234' (which lacks commas)

https://www.regular-expressions.info/backref.html
^\d{1,3}(,\d{3})*$

From the start of the string many any digit 1 to 3 times.
It can be optionally followed by this group - a single comma and 3 digits.
The above group can be repeated multiple times.


21. How would you write a regex that matches the full name of someone whose last name is Nakamoto? You can assume that the first name that comes before it will always be one word that begins with a capital letter. The regex must match the following:

    'Satoshi Nakamoto'
    'Alice Nakamoto'
    'Robocop Nakamoto'

but not the following:

    'satoshi Nakamoto' (where the first name is not capitalized)
    'Mr. Nakamoto' (where the preceding word has a nonletter character)
    'Nakamoto' (which has no first name)
    'Satoshi nakamoto' (where Nakamoto is not capitalized)

^\b[A-Z][a-z]+\b Nakamoto$

22. How would you write a regex that matches a sentence where the first word is either Alice, Bob, or Carol; the second word is either eats, pets, or throws; the third word is apples, cats, or baseballs; and the sentence ends with a period? This regex should be case-insensitive. It must match the following:

    'Alice eats apples.'
    'Bob pets cats.'
    'Carol throws baseballs.'
    'Alice throws Apples.'
    'BOB EATS CATS.'


but not the following:

    'Robocop eats apples.'
    'ALICE THROWS FOOTBALLS.'
    'Carol eats 7 cats.'

^(Alice|Bob|Carol) (eats|pets|throws) (apples|cats|baseballs)\.$
