Q:
	

1. What are the two values of the Boolean data type? How do you write them?

True
False

Q:
	

2. What are the three Boolean operators?

not
and
or

Q:
	

3. Write out the truth tables of each Boolean operator (that is, every possible combination of Boolean values for the operator and what they evaluate to).

Q:
	
@@@ And Truth Table @@@
True and True = True
True and False = False
False and True = False
False and False = False

@@@ Or Truth Table @@@
True or True = True
True or False = True
False or True = True
False or False = False

@@@ Excelusive Or Truth Table @@@
True xor True = False
True xor False = True
False xor True = True
False xor False = False

@@@ Not And Truth Table @@@
not True and not True = False
not True and not False = False
not False and not True = False
not False and not False = True

@@@ Not Or Truth Table @@@
not True or not True = False
not True or not False = True
not False or not True = True
not False or not False = True

@@@ Not Excelusive Or Truth Table @@@
not True xor not True = True
not True xor not False = False
not False xor not True = False
not False xor not False = True

4. What do the following expressions evaluate to?

(5 > 4) and (3 == 5) is False
not (5 > 4) is False
(5 > 4) or (3 == 5) is True
not ((5 > 4) or (3 == 5))
(True and True) and (True == False) is False
(not False) or (not True) is True

Q:
	

5. What are the six comparison operators?

Q:

>
>=
<
<=
!=
==	

6. What is the difference between the equal to operator and the assignment operator?

Q:

= will assign data on the right to the variable on the left
== will test if the data on either side is equal to each other	

7. Explain what a condition is and where you would use one.

Q:

A condition is an expression that can be evalauted down to boolean result.  It is used when you what control program flow.	

8. Identify the three blocks in this code:

1) spam = 0
1) if spam == 10:
    2) print('eggs')
    2) if spam > 5:
        3) print('bacon')
    2) else:
        3) print('ham')
    2) print('spam')
1) print('spam')

Q:
	

9. Write code that prints Hello if 1 is stored in spam, prints Howdy if 2 is stored in spam, and prints Greetings! if anything else is stored in spam.

Q:

print('Enter a number')
#remember that input() stores a string
spam = input()
#remember the trailing :
if (spam == str(1)) :
    print('Hello')
elif (spam == str(2)) :
    print('Howdy')
else :
    print('Greetings!')	

10. What can you press if your program is stuck in an infinite loop?

Q:

control + c	

11. What is the difference between break and continue?

Q:

break will exit the iteration and the loop
continue will exit the iteration and continue the loop	

12. What is the difference between range(10), range(0, 10), and range(0, 10, 1) in a for loop?

Q:
	
range(10) is up to 10
range(0, 10) is between 0 and 10, excluding 10.
range(0, 10, 1) is between 0 and 10, excluding 10, and increment by 1)

13. Write a short program that prints the numbers 1 to 10 using a for loop. Then write an equivalent program that prints the numbers 1 to 10 using a while loop.

Q:

#don't forget the trailing:
for i in range(10):
    print(str(i))

i = 1
#don't forget the trailing:
while i <= 10: 
    print(str(i))
    i = i + 1

14. If you had a function named bacon() inside a module named spam, how would you call it after importing spam?

#import the module
import spam
	#use the imported function with the module as prefix
    spam.bacon()
	
#import the module
from spam import bacon
	#don't need the module prefix but it makes it less readable
	bacon()

Extra credit: Look up the round() and abs() functions on the Internet, and find out what they do. Experiment with them in the interactive shell.

They are both inbuilt functions, documentation for them is found here - https://docs.python.org/3/library/functions.html

abs(startingNumber) will return the absolute value of a number


round(startNumber, roundingNumber) will return the starting number rounded to the specified number

>>> round(11.123)
11

>>> round(0.5)
0

>>> round(0.5, 1)
0.5

round(1.5)
2